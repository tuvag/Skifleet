# Generated by Django 4.1.3 on 2022-12-04 20:22

import colorfield.fields
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('temprature', models.IntegerField()),
                ('humidity', models.IntegerField()),
                ('location', models.CharField(max_length=64)),
                ('snow_type', models.CharField(max_length=64)),
                ('notes', models.CharField(max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='Ski',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ski_number', models.IntegerField()),
                ('grind', models.CharField(max_length=64)),
                ('brand', models.CharField(max_length=64)),
                ('img', models.ImageField(blank=True, upload_to='images/')),
                ('url_img', models.URLField()),
                ('color_tag', colorfield.fields.ColorField(default='#ffffff', image_field=None, max_length=18, samples=None)),
                ('notes', models.CharField(max_length=256)),
                ('ski_owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='skies_owned', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Technique',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('technique', models.CharField(max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='SkiTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.IntegerField()),
                ('setting', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_test', to='skis.setting')),
                ('ski', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ski_tested', to='skis.ski')),
            ],
        ),
        migrations.AddField(
            model_name='ski',
            name='technique',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='style', to='skis.technique'),
        ),
        migrations.AddField(
            model_name='setting',
            name='skis',
            field=models.ManyToManyField(related_name='settings', through='skis.SkiTest', to='skis.ski'),
        ),
        migrations.AddField(
            model_name='setting',
            name='tester',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skies_tested', to=settings.AUTH_USER_MODEL),
        ),
    ]
